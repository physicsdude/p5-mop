=pod

=head1 NAME

Perl 5 MOP - Meta Object Protocol - Class Sub Protocol

=head1 DESCRIPTION

This document will describe the proposed API for the
class sub-protocol of the MOP.

=head2 API

As you will see, we are leaning on the side of immutability
here, and only allowing the class to be changed in certain
specific ways. This may be losened up over time, but we
feel it is a good starting point.

B<AUTHORS NOTE:> This is by no means a comprehensive
list, nor is it a fixed list, of methods. This is simply
the first draft of this, and a rough one at that.

=head3 General

These methods are getters for specific metadata about
the class.

=over 4

=item C<get_name>

This returns the class name as a string.

=item C<get_version>

This returns the class version as a value (type of value is TBD).

=item C<get_authority>

This returns the class authority as a string.

=back

=head3 Associated Metaobjects

These are simple getters that store the assciated meta-objects
that are relevant to this class. These are helpful both for
introspection, but also when dynamically adding things to a
class.

=over 4

=item C<base_object_class>

This is the base class which other classes will inherit from, this
is typically some variant of Object

=item C<attribute_class>

This defines the meta-object for attributes that is used by this
class.

=item C<method_class>

This defines the meta-object for methods that is used by this
class.

=back

=head3 Utility

=over 4

=item C<instance_isa( $class )>

This is simply a predicate to determine if a given C<$class> is
in the MRO of this class. It corresponds to calling C<isa> on an
instance of this class.

=item C<equals( $other )>

This will compare the internal UUID of class with another one to
determine equality.

=item C<clone( %params )>

Clone this object and override any internal elements using
the values in C<%params>.

=item C<get_compatible_class>

This will check and return the most compatible metaclass available.

=back

=head3 "Special" Methods

Right now we only have two "special" methods defined, but it is
possible that we will make more. These are specially named methods
that signify certain events that occur with a class.

It is expected that these methods, if overridden, will always
call the super-method.

=over 4

=item C<FINALIZE>

Once a class has been completely constructed, this event method
is called.

=item C<CREATE ( \%params )>

When a class must construct an instance, this method is called.
The default action is to loop through all the attributes in the
MRO and add slots to the instance accordingly and fill them with
either the intial value, or a value from the C<%params>.

=back

=head3 Superclass

These methods provide access to the superclass, as well as the
compiled method resolution order of a class and a dispatcher
mechanism.

=over 4

=item C<get_superclass>

This returns the superclass for this given class.

=item C<set_superclass( $superclass )>

This sets the superclass for this given class.

=item C<get_mro>

This traverses the inheritance hierarchy to gather up all the
classes in the same order in which method resolution would happen.

=item C<get_dispatcher( ?$type )>

This will return a CODE ref iterator which will traverse the MRO
of this class in the order specified through the C<$type> parameter.

Currently only normal order (C<$type> is undef) and reverse order
(C<$type> is 'reverse') are supported. But more may be supported
later on.

=back

=head3 Constructor/Destructor

We propose that constructors and destructors be implemented
as methods, but not be available through the normal method
dispatch. The following methods provide access to those items.

=over 4

=item C<get_constructor>

This returns the method object used for constructing the object.

=item C<set_constructor( $method )>

Given a C<$method>, this sets it to the value of the constructor.

=item C<get_destructor>

This returns the method object used for destructing the object.

=item C<set_destructor( $method )>

Given a C<$method>, this sets it to the value of the destructor.

=back

=head3 Attributes

=over 4

=item C<get_attributes>

This returns the set of attributes for this given class.

=item C<add_attribute( $attribute )>

This will add an C<$attribute> object to the set of attributes
in this class.

=item C<find_attribute( $name )>

Given a C<$name>, this will attempt to locate an attribute by that
name within the MRO of the class.

=back

=head3 Methods

=over 4

=item C<get_methods>

This returns the set of method for this given class.

=item C<add_method( $method )>

This will add an C<$method> object to the set of methods in this
class.

=item C<find_method( $name )>

Given a C<$name>, this will attempt to locate a method by that name
within the MRO of the class.

=back

=head1 AUTHOR

Stevan Little E<lt>stevan.little@iinteractive.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2011 Infinity Interactive, Inc.

L<http://www.iinteractive.com>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut